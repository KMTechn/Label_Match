# .github/workflows/release.yml

name: Create GitHub Release

# 이 워크플로우가 언제 실행될지 정의합니다.
# 'v'로 시작하는 태그(예: v1.0.7)가 푸시될 때 실행됩니다.
on:
  push:
    tags:
      - 'v*'

# 실행될 작업들을 정의합니다.
jobs:
  build-and-release:
    # .exe 파일을 빌드해야 하므로 Windows 환경에서 실행합니다.
    runs-on: windows-latest

    # 작업 단계들을 정의합니다.
    steps:
      # 1. 소스 코드를 가져옵니다 (Checkout).
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Python 환경을 설정합니다.
      # 사용하시는 파이썬 버전에 맞게 수정할 수 있습니다. (예: '3.9', '3.10', '3.11')
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3. 필요한 라이브러리를 설치합니다.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 4. PyInstaller로 .exe 파일을 빌드합니다.
      # --onefile: 하나의 exe 파일로 만듭니다.
      # --windowed: 실행 시 콘솔 창(검은 창)이 뜨지 않도록 합니다.
      # --name: 생성될 exe 파일의 이름을 지정합니다.
      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --name="Label_Match_Setup" Label_Match.py

      # 5. 빌드된 .exe 파일을 압축합니다. (Windows runner의 PowerShell 명령어 사용)
      # github.ref_name은 워크플로우를 실행시킨 태그 이름(예: v1.0.7)입니다.
      - name: Zip the executable
        run: |
          Compress-Archive -Path dist/Label_Match_Setup.exe -DestinationPath "Label_Match-${{ github.ref_name }}.zip"
      
      # 6. GitHub Release를 생성하고 압축 파일을 Asset으로 업로드합니다.
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # 업로드할 파일 목록
          files: "Label_Match-${{ github.ref_name }}.zip"
          # 릴리스 제목
          name: "Release ${{ github.ref_name }}"
          # 릴리스 본문 (비워두면 태그의 커밋 메시지가 자동으로 들어갑니다)
          body: "New release version ${{ github.ref_name }}"
          # 초안(draft)이나 사전 릴리스(prerelease)가 아님을 명시
          draft: false
          prerelease: false